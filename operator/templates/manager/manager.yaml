apiVersion: apps/v1
kind: Deployment
metadata:
  name: securecodebox-controller-manager
  namespace: {{ .Release.Namespace }}
  labels:
    control-plane: securecodebox-controller-manager
spec:
  selector:
    matchLabels:
      control-plane: securecodebox-controller-manager
  replicas: 1
  template:
    metadata:
      labels:
        control-plane: securecodebox-controller-manager
    spec:
      containers:
        - command:
            - /manager
          args:
            - --enable-leader-election
          {{- if .Values.image.digest }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}@{{ .Values.image.digest }}"
          {{- else }}
          image: "{{ .Values.image.registry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          name: manager
          securityContext:
            runAsNonRoot: true
            allowPrivilegeEscalation: false
            runAsUser: 1000
            runAsGroup: 3000
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - all      
          env:
            # TODO: integrate with cert manager and auto gen a cert for minio
            {{- if .Values.minio.enabled }}
            - name: S3_USE_SSL
              value: 'false'
            - name: S3_ENDPOINT
              value: "{{ .Release.Name }}-minio.{{ .Release.Namespace }}.svc.cluster.local"
            - name: S3_PORT
              value: '9000'
            - name: S3_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-minio"
                  key: accesskey
            - name: S3_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: "{{ .Release.Name }}-minio"
                  key: secretkey
            - name: S3_BUCKET
              value: {{ .Values.minio.defaultBucket.name }}
            {{- else }}
            - name: S3_USE_SSL
              # Always use tls when connecting to outside the cluster.
              value: "true"
            - name: S3_ENDPOINT
              value: {{ .Values.s3.endpoint | quote }}
            - name: S3_BUCKET
              value: {{ .Values.s3.bucket }}
            {{- if .Values.s3.port }}
            - name: S3_PORT
              value: {{ .Values.s3.port }}
            {{- end }}
            - name: S3_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.s3.keySecret }}
                  key: accesskey
            - name: S3_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.s3.keySecret }}
                  key: secretkey
            {{- end }}
            {{- if .Values.lurcher.image.digest }}
            - name: LURCHER_IMAGE
              value: "{{ .Values.lurcher.image.registry }}/{{ .Values.lurcher.image.repository }}@{{ .Values.lurcher.image.digest }}"
            {{- else }}
            - name: LURCHER_IMAGE
              value: "{{ .Values.lurcher.image.registry }}/{{ .Values.lurcher.image.repository }}:{{ .Values.lurcher.image.tag }}"
            {{- end }}
            - name: LURCHER_PULL_POLICY
              value: {{ .Values.lurcher.image.pullPolicy }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      terminationGracePeriodSeconds: 10
      serviceAccountName: securecodebox-operator