on: push
name: "CI"
jobs:
  integrations:
    name: "Test / Unit / Node.js Code"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: "list files and folders"
        run: ls
      - name: "Install npm dependencies in all parser sub projects"
        run: |
          for dir in integrations/*/parser/
          do
              cd $dir
              if [ -f package.json ] && [ -f package-lock.json ]; then
                  echo "Installing dependencies for $dir"
                  npm ci
              fi
              # cd back
              cd -
          done
      - name: "Install npm dependencies in all persistence sub projects"
        run: |
          for dir in persistence/*/
          do
              cd $dir
              if [ -f package.json ] && [ -f package-lock.json ]; then
                  echo "Installing dependencies for $dir"
                  npm ci
              fi
              # cd back
              cd -
          done
      - name: "Install npm test dependencies"
        run: |
          npm ci
          cd integrations/
          npm ci
      - name: "Run tests"
        run: |
          npm test -- --ci --colors --coverage
  operator:
    name: "Build / Operator"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-go@v2-beta
        with:
          go-version: "1.13"
      - name: "Lint Operator Go Code"
        run: |
          cd operator/
          go fmt ./...
          go vet ./...
      - name: "Build'n Push Operator"
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: scbexperimental/operator
          tag_with_ref: true
          tag_with_sha: true
          path: ./operator/
  lurcher:
    name: "Build / Lurcher"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: actions/setup-go@v2-beta
        with:
          go-version: "1.13"
      - name: "Lint Lurcher Go Code"
        run: |
          cd operator/
          go fmt ./...
          go vet ./...
      - uses: docker/build-push-action@v1
        name: "Build & Push Lurcher Image"
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: scbexperimental/lurcher
          tag_with_ref: true
          tag_with_sha: true
          path: ./lurcher/
  parserImages:
    name: "Build / Parsers"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      # SDK
      - uses: docker/build-push-action@v1
        name: "Build & Push Parser SDK"
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: scbexperimental/parser-sdk-nodejs
          path: ./parser-sdk/nodejs/
          tag_with_ref: true
          tag_with_sha: true
      # Actual Parsers
      - uses: docker/build-push-action@v1
        name: "Build & Push Amass Parser Image"
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: scbexperimental/parser-amass
          path: ./integrations/amass/parser/
          tag_with_ref: true
          tag_with_sha: true
      - uses: docker/build-push-action@v1
        name: "Build & Push kube-hunter Parser Image"
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: scbexperimental/parser-kube-hunter
          path: ./integrations/kube-hunter/parser/
          tag_with_ref: true
          tag_with_sha: true
      - uses: docker/build-push-action@v1
        name: "Build & Push Nikto Parser Image"
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: scbexperimental/parser-nikto
          path: ./integrations/nikto/parser/
          tag_with_ref: true
          tag_with_sha: true
      - uses: docker/build-push-action@v1
        name: "Build & Push Nmap Parser Image"
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: scbexperimental/parser-nmap
          path: ./integrations/nmap/parser/
          tag_with_ref: true
          tag_with_sha: true
      - uses: docker/build-push-action@v1
        name: "Build & Push ssh_scan Parser Image"
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: scbexperimental/parser-ssh-scan
          path: ./integrations/ssh_scan/parser/
          tag_with_ref: true
          tag_with_sha: true
      - uses: docker/build-push-action@v1
        name: "Build & Push SSLyze Parser Image"
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: scbexperimental/parser-sslyze
          path: ./integrations/sslyze/parser/
          tag_with_ref: true
          tag_with_sha: true
      - uses: docker/build-push-action@v1
        name: "Build & Push OWASP Zap Parser Image"
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: scbexperimental/parser-zap
          path: ./integrations/zap/parser/
          tag_with_ref: true
          tag_with_sha: true
  persistenceImages:
    name: "Build / PersistenceProviders"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      # SDK
      - uses: docker/build-push-action@v1
        name: "Build & Push Persistence SDK"
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: scbexperimental/persistence-sdk-nodejs
          path: ./persistence-sdk/nodejs/
          tag_with_ref: true
      # Actual PersistenceProviders
      - uses: docker/build-push-action@v1
        name: "Build & Push Elastic PersistenceProvider Image"
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: scbexperimental/persistence-elastic
          path: ./persistence/persistence-elastic/
          tag_with_ref: true
      - uses: docker/build-push-action@v1
        name: "Build & Push Elastic PersistenceProvider Dashboard Importer Image"
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: scbexperimental/persistence-elastic-dashboard-importer
          path: ./persistence/persistence-elastic/dashboardImporter/
          tag_with_ref: true
  scannerImages:
    # Note we only build images for scanner that don't provider official public container images
    name: "Build / Scanner"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: docker/build-push-action@v1
        name: "Build & Push Nmap Scanner Image"
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: scbexperimental/nmap
          path: ./integrations/nmap/scanner/
          # Note: not prefixed with a "v" as this seems to match nmap versioning standards
          tags: "7.80,7.80-1,latest"
      - uses: docker/build-push-action@v1
        name: "Build & Push kube-hunter Scanner Image"
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: scbexperimental/kube-hunter
          path: ./integrations/kube-hunter/scanner/
          # Note: not prefixed with a "v" as this matches the aquasec/kube-hunter tags
          tags: "0.3.0,latest"
  integrationTests:
    name: "Test / Integration / k8s ${{ matrix.k8sVersion }}"
    needs:
      - scannerImages
      - persistenceImages
      - parserImages
      - operator
      - lurcher
    runs-on: ubuntu-latest
    strategy:
      matrix:
        k8sVersion: ['1.18.0', '1.17.2', '1.16.4', '1.15.7']
    steps:
      - uses: actions/checkout@master
      - name: "Start kind cluster"
        run: |
          kind create cluster --image kindest/node:v${{ matrix.k8sVersion }} --wait 3m
      - name: "Inspect kind cluster"
        run: | 
          kubectl config current-context
          kubectl get node
      - name: "Install Operator"
        run: | 
          # Namespace in which the scans for the tests will be executed
          kubectl create namespace integration-tests

          # Operator Namespace
          kubectl create namespace securecodebox-system
          # Install Operator using the images of the current commit 
          helm -n securecodebox-system install securecodebox-operator ./operator/ --wait \
            --set="image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="image.digest=null" \
            --set="lurcher.image.tag=sha-$(git rev-parse --short HEAD)" \
            --set="lurcher.image.digest=null"
      - name: "Inspect Operator"
        run: |
          echo "Deployment in namspace 'securecodebox-system'"
          kubectl -n securecodebox-system get deployments
          echo "Deployment in namspace 'securecodebox-system'"
          kubectl -n securecodebox-system get pods
          echo "Operator Startup Logs"
          kubectl -n securecodebox-system logs deployment/securecodebox-controller-manager
      - name: "Install Test Dependencies"
        run: |
          cd tests/integration/ 
          npm ci
      - name: "Nmap Integration Tests"
        run: | 
          helm -n integration-tests install nmap ./integrations/nmap/ --set="parserImage.tag=sha-$(git rev-parse --short HEAD)"
          cd tests/integration/
          npx jest --ci --color nmap
      - name: "Inspect Operator"
        run: |
          echo "Deployment in namspace 'securecodebox-system'"
          kubectl -n securecodebox-system get deployments
          echo "Deployment in namspace 'securecodebox-system'"
          kubectl -n securecodebox-system get pods
          echo "Operator Startup Logs"
          kubectl -n securecodebox-system logs deployment/securecodebox-controller-manager
      - name: "Delete kind cluster"
        run: | 
          kind delete cluster
